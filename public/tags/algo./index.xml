<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algo. on Yuchi Site</title>
    <link>http://localhost:1313/tags/algo./</link>
    <description>Recent content in Algo. on Yuchi Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/algo./index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[LCS] Longest Common Subsequence演算法</title>
      <link>http://localhost:1313/post/lcs-longest-common-subsequence%E6%BC%94%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/post/lcs-longest-common-subsequence%E6%BC%94%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;lcs-longest-common-subsequence演算法&#34;&gt;[LCS] Longest Common Subsequence演算法&lt;/h1&gt;&#xA;&lt;p&gt;給定兩個字串s1和s2，這個演算法可以幫助我們找到兩個字串的最長共同子序列。&lt;/p&gt;&#xA;&lt;p&gt;如果我們想要判斷兩個字串的最長的共同子序列，可以按照這樣下去思考。&lt;/p&gt;&#xA;&lt;p&gt;我們從s1和s2的最右端開始去思考&lt;/p&gt;&#xA;&lt;p&gt;假設s1的長度為m，s2的長度為n&lt;/p&gt;&#xA;&lt;p&gt;現在判斷s1[m - 1]和s2[n - 1]是否不一樣&lt;/p&gt;&#xA;&lt;p&gt;如果一樣我們可以判定s1[m - 1]和s2[n - 1]屬於共同子序列的一員，這時候共同子序列總長度可以加一。&lt;/p&gt;&#xA;&lt;p&gt;那如果不一樣，就要考慮三個情況：&lt;/p&gt;&#xA;&lt;p&gt;第一個是把s1最後一個字去掉然後和s2去找最長共同子序列。&lt;/p&gt;&#xA;&lt;p&gt;第二個是把s2最後一個字去掉然後去跟s1找最長共同子序列。&lt;/p&gt;&#xA;&lt;p&gt;第三個是把s1最後一個字去掉和s2最後一個字去掉去找最長共同子序列。&lt;/p&gt;&#xA;&lt;p&gt;不過其實只要考慮前兩個情況就好了，因為長度越長的字串越有可能出現越長的共同子序列。&lt;/p&gt;&#xA;&lt;p&gt;所以現在已經處理完兩個字串的判斷邏輯了，最後就要來處理我們字串的判斷的終止條件是什麼？&lt;/p&gt;&#xA;&lt;p&gt;停止的條件很簡單就是當其中一個字串已經是空的了，那當然就不會有共同子序列了，這時最長共同子序列的長度就是0。&lt;/p&gt;&#xA;&lt;p&gt;以下是python的實作，@lru_cache是python中的快取機制，作用就像是memo一樣，只要我們call lcs時傳入的參數是一樣的就會直接回傳一樣的結果，可以用來節省時間。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@lru_cache&lt;/span&gt;(maxsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lcs&lt;/span&gt;(w1, w2, i, j):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; w1[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; w2[j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; lcs(w1, w2, i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; max(lcs(w1, w2, i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, j), lcs(w1, w2, i, j &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
