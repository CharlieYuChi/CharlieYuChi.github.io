<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yuchi Site</title>
    <link>https://charlieyuchi.github.io/</link>
    <description>Recent content on Yuchi Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://charlieyuchi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何使用git 架站</title>
      <link>https://charlieyuchi.github.io/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git-%E6%9E%B6%E7%AB%99/</link>
      <pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://charlieyuchi.github.io/post/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8git-%E6%9E%B6%E7%AB%99/</guid>
      <description>&lt;h1 id=&#34;如何使用git-架站&#34;&gt;如何使用git 架站&lt;/h1&gt;&#xA;&lt;p&gt;使用 &lt;strong&gt;GitHub&lt;/strong&gt; 來架設網站是一個方便又免費的選擇，特別適合個人作品集、部落格或專案文件。GitHub 提供 &lt;strong&gt;GitHub Pages&lt;/strong&gt;，可以將儲存庫中的靜態網頁（如 HTML、CSS、JavaScript）直接部署成一個公開可訪問的網站。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;如何使用 GitHub 架設網站的步驟&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;方法 1：使用 GitHub Pages 部署靜態網站&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;這種方法適合單純的靜態網站（HTML、CSS、JavaScript），適合新手使用。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;步驟 1：建立 GitHub 儲存庫&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;1. 登入 &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;2. 點擊「&lt;strong&gt;New Repository&lt;/strong&gt;」建立一個新的儲存庫。&lt;/p&gt;&#xA;&lt;p&gt;3. 命名儲存庫，例如 my-website，選擇「Public」，並勾選「Add a README file」。&lt;/p&gt;&#xA;&lt;p&gt;4. 點擊「Create Repository」。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;步驟 2：上傳或建立網頁文件&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;1. 進入儲存庫，點擊「&lt;strong&gt;Add file → Upload files&lt;/strong&gt;」，上傳你的 HTML、CSS、JavaScript 文件，或直接在線上編輯。&lt;/p&gt;&#xA;&lt;p&gt;2. 建立一個 index.html 作為網站的首頁，內容範例如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;&#xA;    &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;&#xA;    &amp;lt;title&amp;gt;My GitHub Website&amp;lt;/title&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;    &amp;lt;h1&amp;gt;歡迎來到我的 GitHub Pages 網站！&amp;lt;/h1&amp;gt;&#xA;    &amp;lt;p&amp;gt;這是一個靜態網站示範。&amp;lt;/p&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;步驟 3：啟用 GitHub Pages&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>hugo &#43; github</title>
      <link>https://charlieyuchi.github.io/post/hugo_github/</link>
      <pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://charlieyuchi.github.io/post/hugo_github/</guid>
      <description>&lt;h1 id=&#34;hugo--github&#34;&gt;hugo + github&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;baseURL 如果打錯會造成裡面的連結錯誤&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;e.g. xxx.github.io 打成 xxx.io.github&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;網站修改完upload流程&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;terminal&#xA;&lt;ol&gt;&#xA;&lt;li&gt;$: hugo&#xA;&lt;ol&gt;&#xA;&lt;li&gt;生成新的網頁到/public&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;在/my-hugo-site&#xA;&lt;ol&gt;&#xA;&lt;li&gt;把/public中的網頁拉出來到./&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;git commit + push 拉出來的網頁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Hugo 安裝(Mac)</title>
      <link>https://charlieyuchi.github.io/post/post2/</link>
      <pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://charlieyuchi.github.io/post/post2/</guid>
      <description>&lt;h1 id=&#34;如何在macbook環境安裝hugo-套件&#34;&gt;如何在Macbook環境安裝Hugo 套件&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;開啟啟動台&lt;/li&gt;&#xA;&lt;li&gt;打開終端機&lt;/li&gt;&#xA;&lt;li&gt;在終端機輸入&#xA;&lt;ul&gt;&#xA;&lt;li&gt;brew install hugo&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>An Example Post</title>
      <link>https://charlieyuchi.github.io/post/my-first-post/</link>
      <pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://charlieyuchi.github.io/post/my-first-post/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>https://charlieyuchi.github.io/post/docker-%E8%B6%85%E5%85%A5%E9%96%80%E4%BB%8B%E7%B4%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://charlieyuchi.github.io/post/docker-%E8%B6%85%E5%85%A5%E9%96%80%E4%BB%8B%E7%B4%B9/</guid>
      <description>&lt;h1 id=&#34;docker-超入門介紹&#34;&gt;Docker 超入門介紹&lt;/h1&gt;&#xA;&lt;h2 id=&#34;docker情境介紹&#34;&gt;Docker情境介紹&lt;/h2&gt;&#xA;&lt;p&gt;想想今天我們在自己的Linux電腦上面開發了一個python寫的AI 程式，為了把這個python程式run起來，我們費盡心力弄好了環境，才讓它能順利的運作。在你終於能夠鬆一口氣後，主管跟你說，另一台電腦也想要用一樣AI程式，你會心想天啊，同樣的環境設定地獄又要再來一次！&lt;/p&gt;&#xA;&lt;p&gt;這時候就要介紹Docker出場了，Docker 是一種&lt;strong&gt;容器技術&lt;/strong&gt;，可以讓你的應用程式和其環境（包含程式碼、依賴、設定等）一起打包，確保它能夠在不同的平台上運行，而不受環境變化影響。&lt;/p&gt;&#xA;&lt;p&gt;Docker就是我的環境設定超人！&lt;/p&gt;&#xA;&lt;p&gt;介紹完Docker功用的背景，接著簡單介紹我目前學到的三個最基礎的必備名詞以及它們的關係。&lt;/p&gt;&#xA;&lt;p&gt;這三個名詞分別是&lt;strong&gt;Dockerfile&lt;/strong&gt;、&lt;strong&gt;Image&lt;/strong&gt;和&lt;strong&gt;Container&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;dockerfile-是什麼&#34;&gt;&lt;strong&gt;Dockerfile 是什麼？&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;dockerfile-是一個文字檔包含了一系列指令告訴-docker-如何構建一個-image&#34;&gt;&lt;strong&gt;Dockerfile 是一個文字檔&lt;/strong&gt;，包含了一系列指令，告訴 Docker &lt;strong&gt;如何構建一個 Image&lt;/strong&gt;。&lt;/h3&gt;&#xA;&lt;h3 id=&#34;dockerfile-與-image-的關係&#34;&gt;&lt;strong&gt;Dockerfile 與 Image 的關係&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Dockerfile 是 Image 的「食譜」&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Image 是根據 Dockerfile「烹飪」出來的結果&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Docker 會根據 Dockerfile 的指令，逐步創建一個 &lt;strong&gt;Image&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;image-是什麼&#34;&gt;Image 是什麼？&lt;/h2&gt;&#xA;&lt;h3 id=&#34;可以看作是程式的安裝檔案安裝檔案裡面要裝什麼都已經定義好了是不能改變的可以看成就是一個exe檔或dmg&#34;&gt;可以看作是程式的安裝檔案，安裝檔案裡面要裝什麼都已經定義好了是不能改變的，可以看成就是一個.exe檔或.dmg。&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Docker &lt;strong&gt;Image&lt;/strong&gt; 是 &lt;strong&gt;一個不可變的模版&lt;/strong&gt;，包含應用程式及其運行環境&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;運行環境包含以下&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;作業系統（Linux）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;應用程式（Python, Node.js, etc.）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;依賴（套件、函式庫）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;環境變數&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它&lt;strong&gt;不能直接運行&lt;/strong&gt;，但可以用來啟動&lt;strong&gt;容器（Container）&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;container是什麼&#34;&gt;Container是什麼？&lt;/h2&gt;&#xA;&lt;h3 id=&#34;可以看成是正在運行的程式程式內容就是照著image內定義好的內容下去跑就像是程序管理員中一個在跑的程序一樣&#34;&gt;可以看成是正在運行的程式，程式內容就是照著Image內定義好的內容下去跑，就像是程序管理員中一個在跑的程序一樣。&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Docker &lt;strong&gt;Container（容器）&lt;/strong&gt; 是 &lt;strong&gt;從 Image 啟動的執行實例&lt;/strong&gt;，它包含了運行應用所需的一切環境。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;你可以&lt;strong&gt;創建、運行、停止、刪除&lt;/strong&gt;容器，但容器本身是可變的（可以寫入資料）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;你可以從同一個 Image 啟動多個 Container，就像你可以打開多個相同的應用程式視窗一樣。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;小結&#34;&gt;小結&lt;/h2&gt;&#xA;&lt;p&gt;我們可以這樣看Dockerfile、Image與Container，如果以寫程式來比喻的話，Dockerfile就是我們的原始碼，Image就是編譯完變成一包的執行檔，Container就是電腦正在執行中的執行檔。&#xA;拉回到我們最初的目標就是希望我們寫的那個AI程式能夠跟著設定好的環境順利運作，這個部分就能與上面的例子對應就是把環境與程式都透過Dockerfile設定好，編譯成一個Image，最後我們只要運作一個裝著這個Image的Container就能成功跑起我們的AI程式了！&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
