<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Yuchi Site</title>
    <link>https://charlieyuchi.github.io/tags/docker/</link>
    <description>Recent content in Docker on Yuchi Site</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://charlieyuchi.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker 超入門介紹</title>
      <link>https://charlieyuchi.github.io/post/docker-%E8%B6%85%E5%85%A5%E9%96%80%E4%BB%8B%E7%B4%B9/</link>
      <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://charlieyuchi.github.io/post/docker-%E8%B6%85%E5%85%A5%E9%96%80%E4%BB%8B%E7%B4%B9/</guid>
      <description>&lt;h1 id=&#34;docker-超入門介紹&#34;&gt;Docker 超入門介紹&lt;/h1&gt;&#xA;&lt;h2 id=&#34;docker情境介紹&#34;&gt;Docker情境介紹&lt;/h2&gt;&#xA;&lt;p&gt;想想今天我們在自己的Linux電腦上面開發了一個python寫的AI 程式，為了把這個python程式run起來，我們費盡心力弄好了環境，才讓它能順利的運作。在你終於能夠鬆一口氣後，主管跟你說，另一台電腦也想要用一樣AI程式，你會心想天啊，同樣的環境設定地獄又要再來一次！&lt;/p&gt;&#xA;&lt;p&gt;這時候就要介紹Docker出場了，Docker 是一種&lt;strong&gt;容器技術&lt;/strong&gt;，可以讓你的應用程式和其環境（包含程式碼、依賴、設定等）一起打包，確保它能夠在不同的平台上運行，而不受環境變化影響。&lt;/p&gt;&#xA;&lt;p&gt;Docker就是我的環境設定超人！&lt;/p&gt;&#xA;&lt;p&gt;介紹完Docker功用的背景，接著簡單介紹我目前學到的三個最基礎的必備名詞以及它們的關係。&lt;/p&gt;&#xA;&lt;p&gt;這三個名詞分別是&lt;strong&gt;Dockerfile&lt;/strong&gt;、&lt;strong&gt;Image&lt;/strong&gt;和&lt;strong&gt;Container&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;dockerfile-是什麼&#34;&gt;&lt;strong&gt;Dockerfile 是什麼？&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;dockerfile-是一個文字檔包含了一系列指令告訴-docker-如何構建一個-image&#34;&gt;&lt;strong&gt;Dockerfile 是一個文字檔&lt;/strong&gt;，包含了一系列指令，告訴 Docker &lt;strong&gt;如何構建一個 Image&lt;/strong&gt;。&lt;/h3&gt;&#xA;&lt;h3 id=&#34;dockerfile-與-image-的關係&#34;&gt;&lt;strong&gt;Dockerfile 與 Image 的關係&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Dockerfile 是 Image 的「食譜」&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Image 是根據 Dockerfile「烹飪」出來的結果&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Docker 會根據 Dockerfile 的指令，逐步創建一個 &lt;strong&gt;Image&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;image-是什麼&#34;&gt;Image 是什麼？&lt;/h2&gt;&#xA;&lt;h3 id=&#34;可以看作是程式的安裝檔案安裝檔案裡面要裝什麼都已經定義好了是不能改變的可以看成就是一個exe檔或dmg&#34;&gt;可以看作是程式的安裝檔案，安裝檔案裡面要裝什麼都已經定義好了是不能改變的，可以看成就是一個.exe檔或.dmg。&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Docker &lt;strong&gt;Image&lt;/strong&gt; 是 &lt;strong&gt;一個不可變的模版&lt;/strong&gt;，包含應用程式及其運行環境&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;運行環境包含以下&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;作業系統（Linux）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;應用程式（Python, Node.js, etc.）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;依賴（套件、函式庫）&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;環境變數&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;它&lt;strong&gt;不能直接運行&lt;/strong&gt;，但可以用來啟動&lt;strong&gt;容器（Container）&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;container是什麼&#34;&gt;Container是什麼？&lt;/h2&gt;&#xA;&lt;h3 id=&#34;可以看成是正在運行的程式程式內容就是照著image內定義好的內容下去跑就像是程序管理員中一個在跑的程序一樣&#34;&gt;可以看成是正在運行的程式，程式內容就是照著Image內定義好的內容下去跑，就像是程序管理員中一個在跑的程序一樣。&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Docker &lt;strong&gt;Container（容器）&lt;/strong&gt; 是 &lt;strong&gt;從 Image 啟動的執行實例&lt;/strong&gt;，它包含了運行應用所需的一切環境。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;你可以&lt;strong&gt;創建、運行、停止、刪除&lt;/strong&gt;容器，但容器本身是可變的（可以寫入資料）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;你可以從同一個 Image 啟動多個 Container，就像你可以打開多個相同的應用程式視窗一樣。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;小結&#34;&gt;小結&lt;/h2&gt;&#xA;&lt;p&gt;我們可以這樣看Dockerfile、Image與Container，如果以寫程式來比喻的話，Dockerfile就是我們的原始碼，Image就是編譯完變成一包的執行檔，Container就是電腦正在執行中的執行檔。&#xA;拉回到我們最初的目標就是希望我們寫的那個AI程式能夠跟著設定好的環境順利運作，這個部分就能與上面的例子對應就是把環境與程式都透過Dockerfile設定好，編譯成一個Image，最後我們只要運作一個裝著這個Image的Container就能成功跑起我們的AI程式了！&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
